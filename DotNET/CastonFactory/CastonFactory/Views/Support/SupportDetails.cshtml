@model CastonFactory.Models.SupportModels.SupportDetailsViewModel
@using CastonFactory.Data.Enums
@{
     ViewData["Title"] = "Destek Detayları";
     string stateColor = "";
     switch (Model.Request.State)
     {
       case SupportState.Open:
         stateColor = "danger";
         break;
       case SupportState.Resolving:
         stateColor = "warning";
         break;
       case SupportState.Closed:
         stateColor = "success";
         break;
       default:
         stateColor = "info";
         break;
     }
}
<div class="main-content">
  <div class="section__content section__content--p30">
    <div class="container-fluid">
      <div class="row">
        <div class="au-card recent-report col-lg-6">
          <div class="au-card-inner">
            <h3 class="title-2">Destek Detayları</h3>
            <div class="recent-report__chart">
              <ul class="list-group list-group-flush">
                <li class="list-group-item">
                  <h5>@Html.DisplayNameFor(model => model.Request.User.FullName):</h5>
                  <p>@Html.DisplayFor(model => model.Request.User.FullName)</p>
                </li>
                <li class="list-group-item">
                  <h5>@Html.DisplayNameFor(model => model.Request.CreateDate):</h5>
                  <p>@Html.DisplayFor(model => model.Request.CreateDate)</p>
                </li>
                <li class="list-group-item">
                  <h5>@Html.DisplayNameFor(model => model.Request.Subject):</h5>
                  <p>@Html.DisplayFor(model => model.Request.Subject)</p>
                  <h5>@Html.DisplayNameFor(model => model.Request.Message):</h5>
                  <p class="card-text">@Html.DisplayFor(model => model.Request.Message)</p>
                </li>
                <li class="list-group-item">
                  <h5>@Html.DisplayNameFor(model => model.Request.State):</h5>
                
                      <span class="badge badge-@stateColor">@Model.Request.State.GetStateText()</span>
               
                </li>
              </ul>
            </div>
            <div>
              <div class="card-footer">
                <button class="btn btn-primary btn-sm"><a asp-action="Index" asp-controller="Support" class="text text-white">Geri Dön</a></button>
                @if (Model.Request.State == SupportState.Open)
                {
                  <button class="btn btn-warning btn-sm"><a asp-action="ChangeState" asp-controller="Support" asp-route-state="@((int)SupportState.Resolving)" asp-route-id="@Model.Request.Id" class="text text-white">İşleme al</a></button>
                }
                else if (Model.Request.State == SupportState.Resolving)
                {
                  <button class="btn btn-success btn-sm"><a asp-action="ChangeState" asp-controller="Support" asp-route-state="@((int)SupportState.Closed)" asp-route-id="@Model.Request.Id" class="text text-white">Kapat</a></button>
                }

              </div>
            </div>
          </div>
        </div>
        @if (Model.Content != null)
        {
          <div class="au-card recent-report col-lg-6">
            <div class="au-card-inner">
              <h3 class="title-2">Destek ile ilgili içerik detayları</h3>
              <div class="recent-report__chart">
                <ul class="list-group list-group-flush">
                  <li class="list-group-item">
                    <h5>@Html.DisplayNameFor(model => model.Request.User.FullName):</h5>
                    <p>@Html.DisplayFor(model => model.Request.User.FullName)</p>
                  </li>
                  <li class="list-group-item">
                    <h5>@Html.DisplayNameFor(model => model.Content.CreationName):</h5>
                    <p>@Html.DisplayFor(model => model.Content.CreationName)</p>
                  </li>
                  <li class="list-group-item">
                    <h5>@Html.DisplayNameFor(model => model.Content.IsActive):</h5>
                    @if (!Model.Content.IsActive)
                    {
                      <span class="badge badge-danger">Onay Bekliyor</span>
                    }
                    else
                    {
                      <span class="badge badge-success">Aktif</span>
                    }
                  </li>
                  <li class="list-group-item">
                    <h5>@Html.DisplayNameFor(model => model.Content.Theme.Name):</h5>
                    <p>@Html.DisplayFor(model => model.Content.Theme.Name)</p>
                    @if (!Model.Content.Theme.UserTheme)
                    {
                      <span class="badge badge-danger">Onay Bekliyor</span>
                    }
                    <h5>@Html.DisplayNameFor(model => model.Content.Genre.Name):</h5>
                    <p>@Html.DisplayFor(model => model.Content.Genre.Name)</p>
                    @if (!Model.Content.Genre.UserGenre)
                    {
                      <span class="badge badge-danger">Onay Bekliyor</span>
                    }
                    <h5>@Html.DisplayNameFor(model => model.Content.ContentType):</h5>
                    <p>@Html.DisplayFor(model => model.Content.ContentType)</p>
                  </li>
                  <li class="list-group-item">
                    <h5>@Html.DisplayNameFor(model => model.Request.User.PhoneNumber):</h5>
                    <p>@Html.DisplayFor(model => model.Request.User.PhoneNumber)</p>
                    <h5>@Html.DisplayNameFor(model => model.Content.CreateDate):</h5>
                    <p>@Html.DisplayFor(model => model.Content.CreateDate)</p>
                    <h5>@Html.DisplayNameFor(model => model.Content.ModifyDate):</h5>
                    <p>@Html.DisplayFor(model => model.Content.ModifyDate)</p>
                  </li>
                  <li class="list-group-item">
                    <div><a href="~/Contents/@Model.Content.Data.Link" download>İçeriği İndir</a></div>
                  </li>
                </ul>
              </div>
              <div class="card-body">
                @if (!string.IsNullOrEmpty(Model.Content.Data.Link))
                {
                  switch (Model.Content.Data.FileExtension.ToLower())
                  {
                    case ".mp4":
                    case ".mov":
                      <div class="embed-responsive embed-responsive-16by9">
                        <video controls>
                          <source src="https://cdn-music.caston.tv/Resources/Contents/@Model.Content.Data.Link" type="video/mp4">
                          Tarayıcınız bu içeriği desteklemiyor.
                        </video>
                      </div>
                      break;
                    case ".wav":
                    case ".wma":
                    case ".mp3":
                    case ".m4a":
                      <div class="embed-responsive embed-responsive-4by3">
                        <audio controls class="embed-responsive-item">
                          <source src="https://cdn-music.caston.tv/Resources/Contents/@Model.Content.Data.Link">
                        </audio>
                      </div>
                      break;
                    case ".txt":
                    case ".TXT":
                    case ".pdf":
                      <div class="embed-responsive embed-responsive-16by9">
                        <iframe class="embed-responsive-item" src="https://cdn-music.caston.tv/Resources/Contents/@Model.Content.Data.Link"></iframe>
                      </div>
                      break;
                    default:
                      <h4>İçerik verisi bulunamadı veya bozuk.</h4>
                      break;
                  }
                }

              </div>
            </div>
          </div>

        }
      </div>
    </div>
  </div>
</div>