@model CastonFactory.Data.Models.Content

@{
  ViewData["Title"] = "İçerik Detayları";
}

@section MetaTags{
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
}

<div class="main-content">
  <div class="section__content section__content--p30">
    <div class="container-fluid">
      <div class="row">
        <div class="card col-lg-6">
          <div class="card-body">
            <h5 class="card-title">İçerik Detayları</h5>
          </div>
          <ul class="list-group list-group-flush">
            <li class="list-group-item">
              <h5>@Html.DisplayNameFor(model => model.User.FullName):</h5>
              <p>@Html.DisplayFor(model => model.User.FullName)</p>
            </li>
            <li class="list-group-item">
              <h5>@Html.DisplayNameFor(model => model.CreationName):</h5>
              <p>@Html.DisplayFor(model => model.CreationName)</p>
            </li>
            <li class="list-group-item">
              <h5>@Html.DisplayNameFor(model => model.Theme.Name):</h5>
              <p>@Html.DisplayFor(model => model.Theme.Name)</p>
            </li>
            <li class="list-group-item">
              <h5>@Html.DisplayNameFor(model => model.Genre.Name):</h5>
              <p>@Html.DisplayFor(model => model.Genre.Name)</p>
            </li>
            <li class="list-group-item">
              <h5>@Html.DisplayNameFor(model => model.ContentType):</h5>
              <p>@Html.DisplayFor(model => model.ContentType)</p>
            </li>
            <li class="list-group-item">
              <h5>@Html.DisplayNameFor(model => model.User.PhoneNumber):</h5>
              <p>@Html.DisplayFor(model => model.User.PhoneNumber)</p>
            </li>
          </ul>
          <div class="card-body">
            <a asp-action="ContentIndex" class="card-link">Geri Dön</a>
          </div>
        </div>
        <div class="card col-lg-6">
          <div class="card-header">
            İçerik
          </div>
          <div class="card-body">
            @if (!string.IsNullOrEmpty(Model.Data.Link))
            {
              switch (Model.Data.FileExtension.ToLower())
              {
                case ".mp4":
                case ".mov":
                  <div class="embed-responsive embed-responsive-16by9" style="height:100% !important">
                    <video controls>
                      <source src="https://cdn-music.caston.tv/Resources/Contents/@Model.Data.Link" type="video/mp4">
                      Tarayıcınız bu içeriği desteklemiyor.
                    </video>
                  </div>
                  break;
                case ".wav":
                case ".mp3":
                case ".m4a":
                  <div class="embed-responsive embed-responsive-4by3" style="height:100% !important">
                    <audio controls class="embed-responsive-item">
                      <source src="https://cdn-music.caston.tv/Resources/Contents/@Model.Data.Link">
                    </audio>
                  </div>
                  break;
                case ".txt":
                case ".TXT":
                case ".pdf":
                  <div class="embed-responsive embed-responsive-16by9 " style="height:100% !important">
                    <iframe class="embed-responsive-item" src="https://cdn-music.caston.tv/Resources/Contents/@Model.Data.Link"></iframe>
                  </div>
                  break;
                default:
                  <h4>İçerik verisi bulunamadı veya bozuk.</h4>
                  break;
              }
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
@section Scripts{

}
